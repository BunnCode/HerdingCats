using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.AI;
using Random = UnityEngine.Random;


//The different states the cat can be in.  The program will check its state
//when updating.
public enum CatState
{
    ROAMING,
    CURIOUS,
    DISTRESS,
    DEAD
}
public class CatAI : MonoBehaviour {
    private static int INTEREST_TRIGGER = 30;
    private static int CURIOSITY_MIN = 0;
    private static int CURIOSITY_MAX = 100;

    /// <summary>
    /// Random cat sound effects
    /// </summary>
    public List<AudioClip> Meows;

    /// <summary>
    /// Prefab to play death effects
    /// </summary>
    public CatDeathController DeathPrefab;

    /// <summary>
    /// The spawner for the cat prefabs.
    /// </summary>
    private CatSpawner catSpawner;

    /// <summary>
    /// Cat state is roaming by default.
    /// </summary>
    private CatState currentState = CatState.ROAMING;

    /// <summary>
    /// Random locations ofr the cat to wander
    /// </summary>
    private List<Transform> randomPositions = new List<Transform>();

    /// <summary>
    /// All hazards in the level
    /// </summary>
    private List<Hazard> hazards = new List<Hazard>();

    /// <summary>
    /// Current target hazard
    /// </summary>
    public Hazard goalHazard;

    /// <summary>
    /// Time between making decisions
    /// </summary>
    private float decisionTime = 5f;

    /// <summary>
    /// Time to stay alive after triggering trap
    /// </summary>
    private float distressTime = 5f;

    /// <summary>
    /// The cat's curiousity levels.  This will increase over time.
    /// </summary>
    private float curiosity = 10f;

    /// <summary>
    /// Navmesh this cat is currently using
    /// </summary>
    private NavMeshAgent agent;

    
    private void Awake()
    {
        //Generate NavMesh.
        agent = GetComponent<NavMeshAgent>();
    }

    /// <summary>
    /// Set the spawner associated with this cat
    /// </summary>
    /// <param name="catSpawner"></param>
    public void setSpawner(CatSpawner catSpawner)
    {
        this.catSpawner = catSpawner;
    }

    /// <summary>
    /// Set the objects the cat interacts with
    /// </summary>
    /// <param name="randomPositions">Safe positions to wander to</param>
    /// <param name="hazards">List of hazards</param>
    public void setPositions(List<Transform> randomPositions, List<Hazard> hazards)
    {
        this.randomPositions = randomPositions;
        this.hazards = hazards;
    }

    /// <summary>
    /// Set default state.  Once this calls, the AI loop begins!
    /// </summary>
    private void Start()
    {
        setState(currentState);
    }

    /// <summary>
    /// This switch statement is called whenever states change around.  Very handy.
    /// </summary>
    /// <param name="catState"></param>
    public void setState(CatState catState)
    {
        //Cancel previous coroutines generated by previous state, and assign new state.
        StopAllCoroutines();
        currentState = catState;

        switch (currentState)
        {
            //If the cat is roaming, do the romaing function. Etc.
            case CatState.ROAMING:
                StartCoroutine(roam());
                break;
            case CatState.CURIOUS:
                StartCoroutine(ApproachHazard());
                break;
            case CatState.DISTRESS:
                StartCoroutine(CatInTrouble());
                break;
            case CatState.DEAD:
                //If the cat dies, de-occupy the hazard and destroy the cat prefab.
                Debug.Log("A cat has fallen.");
                goalHazard.occupied = false;
                goalHazard.trapped = false;
                Destroy(this.gameObject);
                HUDscript.Instance.lives -= 1;
                HUDscript.Instance.freeMeter = 0;
                break;
        }
    }
    
    /// <summary>
    /// Return a currently-available hazard. Returns null if none are free.
    /// </summary>
    /// <returns>A free hazard.</returns>
    private Hazard GetFreeHazard() {
        //Counter to prevent deadlock
        var iter = 0;
        var hazardBag = new List<Hazard>(hazards);
        while (iter < hazards.Count) {
            //Grab a random hazard from the bag
            var checkedHazard = hazardBag[Random.Range(0, hazards.Count)];
            hazardBag.Remove(checkedHazard);
            //Return if if it's free
            if (!checkedHazard.occupied)
                return checkedHazard;
            iter++;
        }
        Debug.LogWarning("Tried to find an open trap... but couldn't.");
        return null;
    }

    //Roaming Script.
    private IEnumerator roam()
    {
        while (currentState == CatState.ROAMING)
        {
            //Pick a random number between the cat's current curiosity level and 100.
            //If the number is above the threshold, the cat enters its curious state.
            //Ensures that, eventually, the cat's curiosity will overwhelm it.
            if (Random.Range(curiosity, CURIOSITY_MAX) >= INTEREST_TRIGGER) {
                goalHazard = GetFreeHazard();
                if (goalHazard == null) {
                    //Could not find a free hazard
                    yield return null;
                }
                else {
                    //no longer roaming
                    setState(CatState.CURIOUS);
                    yield return null;
                }
            }
            //Otherwise, the cat's curiosity grows.
            else
            {
                chooseRandomTarget();
                curiosity = Mathf.Clamp(curiosity + 10, CURIOSITY_MIN, CURIOSITY_MAX);
            }

            //Kind of like a sleep() function for the loop.  Very necessary.
            yield return new WaitForSeconds(decisionTime);
        }
    }

    //Utility function to make the cat walk to a "random" postion.
    private void chooseRandomTarget()
    {
        if (randomPositions.Count == 0) return;

        Debug.Log("choosing a random position. Curiosity: " + curiosity);

        //Just picks a pseudo-random point on the mesh to walk to.
        //Right now, the cat can choose the same spot over and over, which is kinda lame.
        var target = randomPositions[Random.Range(0, randomPositions.Count - 1)];
        agent.destination = target.position;
    }

    //Utility function to make the cat walk to a hazard.
    private IEnumerator ApproachHazard()
    {
        Debug.Log("I have chosen death. Curiosity: " + curiosity);

        //Targets a random hazard to go "investigate."
        agent.destination = goalHazard.transform.position;

        while (Vector3.Distance(transform.position, goalHazard.transform.position) > agent.stoppingDistance)
        {
            //Waits for the cat to get to where its going.
            //Was necessary when the cat's state changed to distress inside here, and now
            // I'm too afraid to change it.
            yield return new WaitForEndOfFrame();
        }
        //setState(CatState.DISTRESS);
    }

    //Utility function that waits for nine seconds, then changes the cat's
    // state to DEAD
    private IEnumerator CatInTrouble()
    {
        Debug.Log("I'm hella distressed!");
        yield return new WaitForSeconds(distressTime);
        setState(CatState.DEAD);

    }


    //This function is nearly identical to the cat dying, but respawns a new
    // cat at the spawn point that represents the rescued cat.
    public void rescue()
    {
        Debug.Log("Rescued!");
        StopAllCoroutines();
        goalHazard.occupied = false;
        goalHazard = null;
        catSpawner.spawnCat();
        Destroy(this.gameObject);
    }
}